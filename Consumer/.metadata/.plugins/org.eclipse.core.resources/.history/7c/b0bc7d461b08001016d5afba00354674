package com.example.consumer;

import java.time.Duration;
import java.util.Collections;
import java.util.List;

import org.apache.kafka.clients.consumer.ConsumerRecord;
import org.apache.kafka.clients.consumer.ConsumerRecords;
import org.apache.kafka.clients.consumer.KafkaConsumer;
import org.apache.kafka.common.TopicPartition;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;

import com.example.consumer.model.EmployeeVO;
import com.example.consumer.service.EmployeeProfileImpl;
import com.example.consumer.util.SystemConfig;
import com.fasterxml.jackson.databind.ObjectMapper;

public class EmployeeConsumer extends Thread {

	private static final Logger logger = LoggerFactory.getLogger(EmployeeConsumer.class);

	@Autowired
	SystemConfig systemConfig;
	
	@Autowired
	EmployeeProfileImpl employeeProfileImpl;
	
	public void run() {
		logger.info("Employee Consumer is running ");
		KafkaConsumer<String,String> kafkaConsumer=getKafkaConsumer();
		kafkaConsumer.subscribe(Collections.singleton(systemConfig.getTopicId1()));
		logger.info("Starting Employee Consumer...");
		try {
			while(true) {
				try {
					ConsumerRecords<String,String> records=kafkaConsumer.poll(Duration.ofMillis(
		                    Long.parseLong(systemConfig.getPollTimeOut())
			                ));;
					if(!records.isEmpty()) {
						logger.info("polling the Employee Records with Partitions: "+records.partitions());
						
						for(TopicPartition partition: records.partitions()) {
							List<ConsumerRecord<String,String>> partitionRecords=records.records(partition);
							
							for(ConsumerRecord<String,String> record : partitionRecords) {
								ObjectMapper objectMapper=new ObjectMapper();
								EmployeeVO employee=objectMapper.readValue(record.value(), EmployeeVO.class);
								Thread.currentThread().setName(employee.getTransactionid());
								
							}
						}
						
					}
				}
			}
		}
	}

	private KafkaConsumer<String, String> getKafkaConsumer() {
		return null;
	}
}
